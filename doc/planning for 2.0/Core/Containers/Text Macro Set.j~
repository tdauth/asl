library ATextMacroCoreContainersSet

	interface AIteratorInterface
		public method next takes nothing returns nothing
		public method previous takes nothing returns nothing
	endinterface

	interface ASimpleIteratorInterface
		public method next takes nothing returns nothing
	endinterface

	interface AContainerInterface
		public method begin takes nothing returns AIteratorInterface
		public method end takes nothing returns AIteratorInterface
		public method reverseBegin takes nothing returns AIteratorInterface
		public method reverseEnd takes nothing returns AIteratorInterface

		public method empty takes nothing returns boolean
		public method reverse takes nothing returns nothing
		public method clear takes nothing returns nothing
		public method unique takes nothing returns nothing
	endinterface

	interface ASimpleContainerInterface
		public method begin takes nothing returns ASimpleIteratorInterface
		public method end takes nothing returns ASimpleIteratorInterface

		public method empty takes nothing returns boolean
		public method reverse takes nothing returns nothing
		public method clear takes nothing returns nothing
		public method unique takes nothing returns nothing
	endinterface

	//! textmacro A_CONTAINER_ITERATOR takes PREFIX, IDENTIFIER, NODESIZE, ITERATORSIZE, VALUETYPE, NULLVALUE
		$PREFIX$ struct $IDENTIFIER$Node[$NODESIZE$]
			private thistype m_next
			private thistype m_previous
			private $VALUETYPE$ m_value

			public method setNext takes thistype next returns nothing
				set this.m_next = next
			endmethod

			public method next takes nothing returns thistype
				return this.m_next
			endmethod

			public method setPrevious takes thistype previous returns nothing
				set this.m_previous = previous
			endmethod

			public method previous takes nothing returns nothing
				return this.m_previous
			endmethod

			public method setValue takes $VALUETYPE$ value returns nothing
				set this.m_value = value
			endmethod

			public method value takes nothing returns $VALUETYPE$
				return this.m_value
			endmethod

			public static method create takes nothing returns thistype
				local thistype this = thistype.allocate()
				set this.m_next = 0
				set this.m_previous = 0
				set this.m_value = $NULLVALUE$
				return this
			endmethod

			public static method maxSize takes nothing returns integer
				return $NODESIZE$
			endmethod
		endstruct

		$PREFIX$ struct $IDENTIFIER$Iterator[$ITERATORSIZE$] extends AIteratorInterface
			private $IDENTIFIER$Node m_node

			/**
			* \note For internal usage only.
			*/
			public method node takes nothing returns $IDENTIFIER$Node
				return this.m_node
			endmethod

			public method isValid takes nothing returns boolean
				return this.m_node != 0
			endmethod

			public method next takes nothing returns nothing
				if (not this.isValid()) then
					return
				endif
				set this.m_node = this.node().next()
			endmethod

			public method previous takes nothing returns nothing
				if (not this.isValid()) then
					return
				endif
				set this.m_node = this.node().previous()
			endmethod

			public static method create takes $IDENTIFIER$Node node returns thistype
				local thistype this = thistype.allocate()
				set this.m_node = node
				return this
			endmethod

			public static method maxSize takes nothing returns integer
				return $ITERATORSIZE$
			endmethod
		endstruct

		$PREFIX$ struct $IDENTIFIER$ReverseIterator[$ITERATORSIZE$] extends AIteratorInterface
			private $IDENTIFIER$Node m_node

			/**
			* \note For internal usage only.
			*/
			public method node takes nothing returns $IDENTIFIER$Node
				return this.m_node
			endmethod

			public method isValid takes nothing returns boolean
				return this.m_node != 0
			endmethod

			public method next takes nothing returns nothing
				if (not this.isValid()) then
					return
				endif
				set this.m_node = this.node().previous()
			endmethod

			public method previous takes nothing returns nothing
				if (not this.isValid()) then
					return
				endif
				set this.m_node = this.node().next()
			endmethod

			public static method create takes $IDENTIFIER$Node node returns thistype
				local thistype this = thistype.allocate()
				set this.m_node = node
				return this
			endmethod

			public static method maxSize takes nothing returns integer
				return $ITERATORSIZE$
			endmethod
		endstruct
	//! endtextmacro

	//! textmacro A_SIMPLE_CONTAINER_ITERATOR takes PREFIX, IDENTIFIER, NODESIZE, ITERATORSIZE, VALUETYPE, NULLVALUE
		$PREFIX$ struct $IDENTIFIER$Node[$NODESIZE$]
			private thistype m_next
			private $VALUETYPE$ m_value

			public method setNext takes thistype next returns nothing
				set this.m_next = next
			endmethod

			public method next takes nothing returns thistype
				return this.m_next
			endmethod

			public method setValue takes $VALUETYPE$ value returns nothing
				set this.m_value = value
			endmethod

			public method value takes nothing returns $VALUETYPE$
				return this.m_value
			endmethod

			public static method create takes nothing returns thistype
				local thistype this = thistype.allocate()
				set this.m_next = 0
				set this.m_value = $NULLVALUE$
				return this
			endmethod

			public static method maxSize takes nothing returns integer
				return $NODESIZE$
			endmethod
		endstruct

		$PREFIX$ struct $IDENTIFIER$Iterator[$ITERATORSIZE$] extends ASimpleIteratorInterface
			private $IDENTIFIER$Node m_node

			/**
			* \note For internal usage only.
			*/
			public method node takes nothing returns $IDENTIFIER$Node
				return this.m_node
			endmethod

			public method isValid takes nothing returns boolean
				return this.m_node != 0
			endmethod

			public method next takes nothing returns nothing
				if (not this.isValid()) then
					return
				endif
				set this.m_node = this.node().next()
			endmethod

			public static method create takes $IDENTIFIER$Node node returns thistype
				local thistype this = thistype.allocate()
				set this.m_node = node
				return this
			endmethod

			public static method maxSize takes nothing returns integer
				return $ITERATORSIZE$
			endmethod
		endstruct
	//! endtextmacro

	struct ARange
		private AIteratorInterface m_begin
		private AIteratorInterface m_end

		public method isValid takes nothing returns boolean
			return this.m_begin().isValid() and this.m_end().isValid()
		endmethod

		public method begin takes nothing returns AIteratorInterface
			return this.m_begin
		endmethod

		public method end takes nothing returns AIteratorInterface
			return this.m_end
		endmethod

		public static method create takes AIteratorInterface begin, AIteratorInterface end returns thistype
			local thistype this = thistype.allocate()
			set this.m_begin = begin
			set this.m_end = end
			return this
		endmethod
	endstruct

	struct ASimpleRange
		private ASimpleIteratorInterface m_begin
		private ASimpleIteratorInterface m_end

		public method isValid takes nothing returns boolean
			return this.m_begin().isValid() and this.m_end().isValid()
		endmethod

		public method begin takes nothing returns ASimpleIteratorInterface
			return this.m_begin
		endmethod

		public method end takes nothing returns ASimpleIteratorInterface
			return this.m_end
		endmethod

		public static method create takes ASimpleIteratorInterface begin, ASimpleIteratorInterface end returns thistype
			local thistype this = thistype.allocate()
			set this.m_begin = begin
			set this.m_end = end
			return this
		endmethod
	endstruct

	//! textmacro A_SIMPLE_CONTAINER takes PREFIX, IDENTIFIER, SIZE, VALUETYPE, NULLVALUE
		$PREFIX$ struct $IDENTIFIER$[$SIZE$] extends ASimpleContainer
			private $IDENTIFIER$Node m_front
			private $IDENTIFIER$Node m_back

			public method front takes nothing returns $VALUETYPE$
				if (this.m_front == 0) then
					return $NULLVALUE$
				endif
				return this.m_front.value()
			endmethod

			public method back takes nothing returns $VALUETYPE$
				if (this.m_back == 0) then
					return $NULLVALUE$
				endif
				return this.m_back.value()
			endmethod

			public method begin takes nothing returns $IDENTIFIER$Iterator
				return $IDENTIFIER$Iterator.create(this.m_front)
			endmethod

			public method end takes nothing returns $IDENTIFIER$Iterator
				return $IDENTIFIER$Iterator.create(this.m_back)
			endmethod

			public method empty takes nothing returns boolean
				return this.m_front == 0
			endmethod

			public method pushFront takes $VALUETYPE$ value returns nothing
				local $IDENTIFIER$Node node = $IDENTIFIER$Node.create()
				call node.setNext(this.m_front)
				call node.setValue(value)
				set this.m_front = node
			endmethod

			public method popFront takes nothing returns nothing
				local $IDENTIFIER$Node node = this.m_front
				set this.m_front = node.next()
				call node.destroy()
			endmethod

			public method resizeWith takes integer size, $VALUETYPE$ value returns nothing
			endmethod

			public method resize takes integer size returns nothing
				call this.resizeValue($NULLVALUE$)
			endmethod

			public method reverse takes nothing returns nothing
			endmethod

			public method removeIf takes thistype.Predicate predicate returns nothing
			endmethod

			public method remove takes $VALUETYPE$ value returns nothing
			endmethod

			public method sort takes thistype.Comparator comparator returns nothing
			endmethod

			/**
			* \p range First element after beginning of range until the end of range is removed (end of range is also removed).
			*/
			public method eraseRange takes ASimpleRange range returns nothing
				local $IDENTIFIER$Node node
				local $IDENTIFIER$Node nextNode
				local boolean extCondition
				if (not range.isValid()) then
					return
				endif
				set node = range.begin.node()
				set nextNode = node.next()
				loop
					exitwhen (nextNode == 0)
					// reached back
					if (nextNode == this.m_back) then
						set this.m_back = node
						call nextNode.destroy()
						exitwhen (true)
					endif
					call node.setNext(nextNode.next())
					set exitCondition = nextNode == range.end.node()
					call nextNode.destroy()
					exitwhen (exitCondition)
					set nextNode = node.next()
				endloop
			endmethod

			public method erase takes $IDENTIIER$Iterator position returns nothing
				local $IDENTIFIER$Iterator end = this.end()
				local ASimpleRange range = ASimpleRange.create(position, end)
				call this.eraseRange(range)
				call range.destroy()
				call end.destroy()
			endmethod

			/**
			* Remove consecutive duplicate elements.
			* For each consecutive set of elements with the same value, remove all but the first one. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility.
			*/
			public method unique takes nothing returns nothing

			endmethod
		endstruct
	//! endtextmacro

	//! textmacro A_CONTAINER takes PREFIX, IDENTIFIER, SIZE, VALUETYPE, NULLVALUE
		$PREFIX$ struct $IDENTIFIER$[$SIZE$] extends AContainerInterface
			private $IDENTIFIER$Node m_front
			private $IDENTIFIER$Node m_back

			public method reverseBegin takes nothing returns $IDENTIFIER$ReverseIterator
				return $IDENTIFIER$ReverseIterator.create(this.m_front)
			endmethod

			public method reverseEnd takes nothing returns $IDENTIFIER$ReverseIterator
				return $IDENTIFIER$ReverseIterator.create(this.m_back)
			endmethod
		endstruct
	//! endtextmacro

	/**
	* A standard container composed of unique keys (containing at most one of each key value) in which the elements' keys are the elements themselves.
	* Meets the requirements of a container, and unordered associative container.
	*/
	//! textmacro A_SET takes PREFIX, IDENTIFIER, BASE, VALUETYPE, NULLVALUE
		$PREFIX$ struct $IDENTIFIER$ extends $BASE$


		endstruct

	//! endtextmacro

	//! runtextmacro A_CONTAINER_ITERATOR("", "AIntegerContainer", "50000", "50000", "integer", "0")
	//! runtextmacro A_CONTAINER("", "AIntegerContainer", "50000", "integer", "0")

	//! runtextmacro A_SIMPLE_CONTAINER_ITERATOR("", "ASimpleIntegerContainer", "50000", "50000", "integer", "0")
	//! runtextmacro A_SIMPLE_CONTAINER("", "ASimpleIntegerContainer", "50000", "integer", "0")

	//! runtextmacro A_SET("", "AIntegerSet", "AIntegerContainer", "integer", "0")

endlibrary